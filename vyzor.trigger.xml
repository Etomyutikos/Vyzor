<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.0">
    <TriggerPackage/>
    <TimerPackage/>
    <AliasPackage>
        <AliasGroup isActive="yes" isFolder="yes">
            <name>vyzor</name>
            <script></script>
            <command></command>
            <packageName>vyzor</packageName>
            <regex></regex>
            <Alias isActive="yes" isFolder="no">
                <name>Unload Vyzor</name>
                <script>echo(&quot;Vyzor: Unloading modules...\n&quot;)
for index in pairs( package.loaded ) do
	if index:find( &quot;vyzor&quot;, 1, true ) then
		echo(string.format(&quot;Vyzor: Found module %s.\n&quot;, index))
		package.loaded[index] = nil
	end
end
echo(&quot;Vyzor: Unloaded all modules.\n&quot;)
Vyzor = nil</script>
                <command></command>
                <packageName></packageName>
                <regex>^U$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>Change Options</name>
                <script>-- There appears to be a Mudlet bug: the scroll bar isn't
-- adjusted properly after the resize. Text comes in where
-- it's supposed to be, though.
Vyzor.Options.Borders = {Top = 0.3, Bottom = &quot;dynamic&quot;}</script>
                <command></command>
                <packageName></packageName>
                <regex>^co$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>Reset Profile</name>
                <script>Vyzor.Options:Reset()</script>
                <command></command>
                <packageName></packageName>
                <regex>^rp$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>Test Vyzor</name>
                <script>-- Change this file for testing.
local image_file = [[C:/Users/Administrator/.config/mudlet/profiles/Midkemia Online/Vyzor/eq_light.png]]

local border = Vyzor.Border(
	10,
	Vyzor.BorderStyle.Groove,
	Vyzor.Brush( Vyzor.Color( Vyzor.ColorMode.Name, &quot;white&quot; ) )
)
local margin = Vyzor.Margin( 5 )
local padding = Vyzor.Padding( 5 )
local green = Vyzor.Brush( Vyzor.Color( Vyzor.ColorMode.Name, &quot;green&quot; ) )
local background = Vyzor.Background( green )
local image = Vyzor.Image( image_file,
	 Vyzor.Alignment.Center )
local img_back = Vyzor.Background( image )
local img_border = Vyzor.Border( nil, nil, image )

Vyzor.HUD.Frames[&quot;VyzorTop&quot;]:Add( border )
Vyzor.HUD.Frames[&quot;VyzorTop&quot;]:Add( margin )
Vyzor.HUD.Frames[&quot;VyzorTop&quot;]:Add( padding )
Vyzor.HUD.Frames[&quot;VyzorTop&quot;]:Add( image )

Vyzor.HUD.Frames[&quot;VyzorBottom&quot;]:Add( border )
Vyzor.HUD.Frames[&quot;VyzorBottom&quot;]:Add( margin )
Vyzor.HUD.Frames[&quot;VyzorBottom&quot;]:Add( padding )
Vyzor.HUD.Frames[&quot;VyzorBottom&quot;]:Add( background )

Vyzor.HUD.Frames[&quot;VyzorRight&quot;]:Add( border )
Vyzor.HUD.Frames[&quot;VyzorRight&quot;]:Add( margin )
Vyzor.HUD.Frames[&quot;VyzorRight&quot;]:Add( padding )
Vyzor.HUD.Frames[&quot;VyzorRight&quot;]:Add( img_back )

Vyzor.HUD.Frames[&quot;VyzorLeft&quot;]:Add( img_border )
Vyzor.HUD.Frames[&quot;VyzorLeft&quot;]:Add( margin )
Vyzor.HUD.Frames[&quot;VyzorLeft&quot;]:Add( image )

local right_frame = Vyzor.Frame( &quot;right_frame&quot;, .2, .3, .6, .4 )
right_frame:Add( border )
right_frame:Add( background )
right_frame:Add( padding )
Vyzor.HUD.Frames[&quot;VyzorRight&quot;]:Add( &quot;right_frame&quot; )

local inner_right = Vyzor.Frame( &quot;inner_right&quot;, 0, 0, 1, 1 )
inner_right:Add( border )
inner_right:Add( img_back )
inner_right:Add( padding )
right_frame:Add( inner_right )

local inner_inner = Vyzor.Frame( &quot;inner_inner&quot;, 0, 0, 1, 1 )
inner_inner:Add( img_border )
inner_inner:Add( padding )
inner_right:Add( &quot;inner_inner&quot; )

local so_deep = Vyzor.Frame( &quot;so_deep&quot;, 0, 0, 1, 1 )
--so_deep:Add( background )
so_deep:Add( border )
so_deep:Add( padding )
inner_inner:Add( so_deep )

local enough = Vyzor.Frame( &quot;enough&quot;, 0, 0, 1, 1 )
enough:Add( border )
enough:Add( image )
so_deep:Add( enough )

--Vyzor.HUD:Draw()
expandAlias(&quot;tc&quot;)</script>
                <command></command>
                <packageName></packageName>
                <regex>^tv$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>TestConsole</name>
                <script>if not second_tc then
	local console_one = Vyzor.MiniConsole( &quot;console_one&quot;, 0, 0, .5, .3 )
	local console_two = Vyzor.MiniConsole( &quot;console_two&quot;, .5, .3, .5, .3, 10 )
	local console_three = Vyzor.MiniConsole( &quot;console_three&quot;, 0, .6, .5, .3, nil, 15 )
	local console_four = Vyzor.MiniConsole( &quot;console_four&quot;, 0, .3, .5, .3, 80 )

	Vyzor.HUD.Frames[&quot;VyzorLeft&quot;]:Add( console_one )
	Vyzor.HUD.Frames[&quot;VyzorLeft&quot;]:Add( console_two )
	Vyzor.HUD.Frames[&quot;VyzorLeft&quot;]:Add( console_three )
	Vyzor.HUD.Frames[&quot;VyzorLeft&quot;]:Add( console_four )

	--Vyzor.HUD:Draw()
	expandAlias( &quot;tg&quot; )

	for i=1, 100 do
		echo( &quot;console_one&quot;, i .. &quot; &quot; )
		echo( &quot;console_two&quot;, i .. &quot; &quot; )
		echo( &quot;console_three&quot;, i .. &quot; &quot; )
		echo( &quot;console_four&quot;, i .. &quot; &quot; )
	end
end

if second_tc then
	local num_tbl = {&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;}
	local randex = num_tbl[math.random(#num_tbl)]

	if math.random(2) == 1 then
		local rndm = math.random(10, 101)
		Vyzor.HUD.Frames[&quot;VyzorLeft&quot;].MiniConsoles[&quot;console_&quot; .. randex].WordWrap = 
			(rndm == 101 and &quot;dynamic&quot;) or rndm
		echo(string.format(&quot;Setting console_%s.WordWrap to %s.\n&quot;,
			randex, (rndm == 101 and &quot;dynamic&quot;)or rndm))
	else
		local rndm = math.random(5, 16)
		Vyzor.HUD.Frames[&quot;VyzorLeft&quot;].MiniConsoles[&quot;console_&quot; .. randex].FontSize = 
			(rndm == 16 and &quot;dynamic&quot;) or rndm
		echo(string.format(&quot;Setting console_%s.FontSize to %s.\n&quot;,
			randex, (rndm == 16 and &quot;dynamic&quot;)or rndm))
	end
end

second_tc = true</script>
                <command></command>
                <packageName></packageName>
                <regex>^tc$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>TestMap</name>
                <script>local map = Vyzor.Map( 0, .7, 1, .3 )

Vyzor.HUD.Frames[&quot;VyzorRight&quot;]:Add( map )

Vyzor.HUD:Draw()</script>
                <command></command>
                <packageName></packageName>
                <regex>^tm$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>TestGauges</name>
                <script>stat = {
	current = 1,
	maximum = 100
}

local back_color = Vyzor.Brush( Vyzor.Color( Vyzor.ColorMode.RGB, &quot;50%&quot;, 0, 0 ) )
local front_color = Vyzor.Brush( Vyzor.Color( Vyzor.ColorMode.RGB, 255, 0, 0 ) )

local back_back = Vyzor.Background( back_color )
local front_back = Vyzor.Background( front_color )

local gauge_back1 = Vyzor.Frame( &quot;gauge_back&quot;, 0, .7, .5, .1 )
gauge_back1:Add( back_back )
local gauge_front1 = Vyzor.Frame( &quot;gauge_front&quot; )
gauge_front1:Add( front_back )

local gauge1 = Vyzor.Gauge( &quot;gauge1&quot;, &quot;stat.current&quot;, &quot;stat.maximum&quot;, gauge_back1, gauge_front1 )

local gauge_back2 = Vyzor.Frame( &quot;gauge_back2&quot;, 0, .8, .5, .1 )
gauge_back2:Add( back_back )
local gauge_front2 = Vyzor.Frame( &quot;gauge_front2&quot; )
gauge_front2:Add( front_back )

local gauge2 = Vyzor.Gauge( &quot;gauge2&quot;, &quot;stat.current&quot;, &quot;stat.maximum&quot;, gauge_back2, gauge_front2,
	Vyzor.GaugeFill.RightLeft )

local gauge_back3 = Vyzor.Frame( &quot;gauge_back3&quot;, .6, .7, .1, .2 )
gauge_back3:Add( back_back )
local gauge_front3 = Vyzor.Frame( &quot;gauge_front3&quot; )
gauge_front3:Add( front_back )

local gauge3 = Vyzor.Gauge( &quot;gauge3&quot;, &quot;stat.current&quot;, &quot;stat.maximum&quot;, gauge_back3, gauge_front3,
	Vyzor.GaugeFill.BottomTop )

local gauge_back4 = Vyzor.Frame( &quot;gauge_back4&quot;, .8, .7, .1, .2 )
gauge_back4:Add( back_back )
local gauge_front4 = Vyzor.Frame( &quot;gauge_front4&quot; )
gauge_front4:Add( front_back )

local gauge4 = Vyzor.Gauge( &quot;gauge4&quot;, &quot;stat.current&quot;, &quot;stat.maximum&quot;, gauge_back4, gauge_front4,
	Vyzor.GaugeFill.TopBottom )

Vyzor.HUD.Frames[&quot;VyzorRight&quot;]:Add( gauge1 )
Vyzor.HUD.Frames[&quot;VyzorRight&quot;]:Add( gauge2 )
Vyzor.HUD.Frames[&quot;VyzorRight&quot;]:Add( gauge3 )
Vyzor.HUD.Frames[&quot;VyzorRight&quot;]:Add( gauge4 )

Vyzor.HUD:Draw()</script>
                <command></command>
                <packageName></packageName>
                <regex>^tg$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>TestGaugeUpdate</name>
                <script>stat = stat or {
	health = {
		current = 1,
		maximum = 100
	},
	mana = {
		current = 1,
		maximum = 100
	},
	endurance = {
		current = 1,
		maximum = 100
	},
	willpower = {
		current = 1,
		maximum = 100
	},
	xp = {
		current = 1,
		maximum = 100
	},
}

stat.health.current = math.random(100)
stat.mana.current = math.random(100)
stat.endurance.current = math.random(100)
stat.willpower.current = math.random(100)
stat.xp.current = math.random(500)

VyzorGaugeUpdate()</script>
                <command></command>
                <packageName></packageName>
                <regex>^tgu$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>vyzor</name>
                <script></script>
                <command></command>
                <packageName></packageName>
                <regex></regex>
                <Alias isActive="yes" isFolder="no">
                    <name>Vyzor Help</name>
                    <script>openUrl(getMudletHomeDir()..&quot;/vyzor/doc/index.html&quot;)</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^vy(?:zor)?\s?h(?:elp)?$</regex>
                </Alias>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>TestColors</name>
                <script>local test = Vyzor.Frame(&quot;color_test&quot;, .3, .3, .3, .3)
test:Add( Vyzor.Color(Vyzor.ColorMode.Name, &quot;green&quot;))
test:Add( Vyzor.Background(
	Vyzor.Brush(
		Vyzor.Color( Vyzor.ColorMode.RGBA, 100, 0, 0 )
	)
))

Vyzor.HUD.Frames[&quot;VyzorLeft&quot;]:Add(test)

echo(test.Stylesheet)

Vyzor.HUD:Draw()

test:Echo(&quot;This is only a test.\n&quot;)</script>
                <command></command>
                <packageName></packageName>
                <regex>^tco$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>TestBox</name>
                <script>local test_red 		= Vyzor.Frame(&quot;test_red&quot;)
test_red:Add(
	Vyzor.Background(
		Vyzor.Brush(
			Vyzor.Color( Vyzor.ColorMode.RGB, &quot;100%&quot;, 0, 0 )
		)
	)
)

local test_blue 	= Vyzor.Frame(&quot;test_blue&quot;)
test_blue:Add(
	Vyzor.Background(
		Vyzor.Brush(
			Vyzor.Color( Vyzor.ColorMode.RGB, 0, 0, &quot;100%&quot; )
		)
	)
)

local test_green 	= Vyzor.Frame(&quot;test_green&quot;)
test_green:Add(
	Vyzor.Background(
		Vyzor.Brush(
			Vyzor.Color( Vyzor.ColorMode.RGB, 0, &quot;100%&quot;, 0 )
		)
	)
)

local test_white 	= Vyzor.Frame(&quot;test_white&quot;)
test_white:Add(
	Vyzor.Background(
		Vyzor.Brush(
			Vyzor.Color( Vyzor.ColorMode.RGB, &quot;100%&quot;, &quot;100%&quot;, &quot;100%&quot; )
		)
	)
)

local test_what 	= Vyzor.Frame(&quot;test_what&quot;)
test_what:Add(
	Vyzor.Background(
		Vyzor.Brush(
			Vyzor.Color( Vyzor.ColorMode.RGB, math.random(255), math.random(255), math.random(255) )
		)
	)
)

local box = Vyzor.Box(&quot;test_box&quot;, .3, .3, .3, .3, Vyzor.BoxMode.Grid, 
	{test_red, test_blue, test_green, test_white, test_what}
)
--local box = Vyzor.Box(&quot;test_box&quot;, .3, .3, .3, .3, Vyzor.BoxMode.Grid, 
--	{test_red, test_blue, test_green, test_white}
--)

Vyzor.HUD.Frames[&quot;VyzorRight&quot;]:Add(box)

Vyzor.HUD:Draw()</script>
                <command></command>
                <packageName></packageName>
                <regex>^tb$</regex>
            </Alias>
        </AliasGroup>
    </AliasPackage>
    <ActionPackage/>
    <ScriptPackage>
        <ScriptGroup isActive="yes" isFolder="yes">
            <name>vyzor</name>
            <packageName>vyzor</packageName>
            <script></script>
            <eventHandlerList/>
            <Script isActive="yes" isFolder="no">
                <name>Vyzor</name>
                <packageName></packageName>
                <script>-- Uncomment this out for quick reloading of Vyzor files.
--expandAlias(&quot;U&quot;)

if not Vyzor then
	echo(&quot;Vyzor: Loading modules...\n&quot;)

	local path = package.path
	local home_dir = getMudletHomeDir()
	local lua_dir = string.format( &quot;%s/%s&quot;, home_dir, [[?.lua]] )
	local init_dir = string.format( &quot;%s/%s&quot;, home_dir, [[?/init.lua]] )
	package.path = string.format( &quot;%s;%s;%s&quot;, path, lua_dir, init_dir )

	local okay, content = pcall( require, &quot;vyzor&quot; )
	package.path = path
	if okay then
		Vyzor = content
	else
		error(string.format(&quot;Vyzor: Error loading module: %s.\n&quot;,
			content))
	end

	if Vyzor then
		echo(&quot;Vyzor: Modules successfully loaded.\n&quot;)
	end
end</script>
                <eventHandlerList/>
            </Script>
        </ScriptGroup>
    </ScriptPackage>
    <KeyPackage/>
</MudletPackage>
